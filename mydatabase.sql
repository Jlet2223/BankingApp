--------------------CREATE TABLE
CREATE TABLE CUSTOMER(
    CUSTOMER_ID INTEGER PRIMARY KEY,
    USERNAME VARCHAR(20) NOT NULL,
    PSSWRD VARCHAR(20) NOT NULL,
    FIRSTNAME VARCHAR(20) NOT NULL,
    LASTNAME VARCHAR(20) NOT NULL,
    EMAIL VARCHAR(30),
    ADDRESS VARCHAR(50)
);

CREATE TABLE EMPLOYEE(
    EMPLOYEE_ID INTEGER PRIMARY KEY,
    USERNAME VARCHAR(20) NOT NULL,
    PSSWRD VARCHAR(20) NOT NULL,
    FIRSTNAME VARCHAR(20) NOT NULL,
    LASTNAME VARCHAR(20) NOT NULL,
    ADMIN_ID SMALLINT 
);

CREATE TABLE ACCOUNT(
    ACCOUNT_ID INTEGER PRIMARY KEY,
    ACCOUNT_NAME VARCHAR(20) NOT NULL,
    BALANCE FLOAT DEFAULT 0,
    STATUS_ID INTEGER DEFAULT 1
);

CREATE TABLE CUSTOMER_TO_ACCOUNT(
    CUSTOMER_ID INTEGER,
    ACCOUNT_ID INTEGER,
    PRIMARY KEY (CUSTOMER_ID , ACCOUNT_ID)
);

CREATE TABLE STATUS(
    STATUS_ID INTEGER PRIMARY KEY,
    TYPE VARCHAR(20) NOT NULL
);

CREATE TABLE TRANSACTION(
    TRANSACTION_ID INTEGER PRIMARY KEY,
    ACCOUNT_ID INTEGER,
    TYPE VARCHAR(30) NOT NULL,
    TIME_HAPPEND DATE NOT NULL
);

----------------------------CREATE SEQUENCE
CREATE SEQUENCE CUST_ID_SEQ MINVALUE 1 INCREMENT BY 1 CACHE 50;
CREATE SEQUENCE ACCOUNT_ID_SEQ MINVALUE 1 INCREMENT BY 1 CACHE 50;
CREATE SEQUENCE TRANSACTION_ID_SEQ MINVALUE 1 INCREMENT BY 1 CACHE 50;
CREATE SEQUENCE EMPLOY_ID_SEQ MINVALUE 1 INCREMENT BY 1 CACHE 50;
--------------------------CREATE TRIGGER
CREATE OR REPLACE TRIGGER CUST_TRIGG
BEFORE INSERT ON CUSTOMER
FOR EACH ROW 
BEGIN
    SELECT CUST_ID_SEQ.NEXTVAL INTO : NEW.CUSTOMER_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER ACCOUNT_TRIGG
BEFORE INSERT ON ACCOUNT
FOR EACH ROW 
BEGIN
    SELECT ACCOUNT_ID_SEQ.NEXTVAL INTO : NEW.ACCOUNT_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER EMPLOY_TRIGG
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW 
BEGIN
    SELECT EMPLOY_ID_SEQ.NEXTVAL INTO : NEW.EMPLOYEE_ID FROM DUAL;
END;
/
CREATE OR REPLACE TRIGGER TRANSACTION_TRIGG
BEFORE INSERT ON TRANSACTION
FOR EACH ROW 
BEGIN
    SELECT TRANSACTION_ID_SEQ.NEXTVAL INTO : NEW.TRANSACTION_ID FROM DUAL;
END;
/
-----------------SETS FOREIGN KEYS
ALTER TABLE ACCOUNT ADD CONSTRAINT FK_ACCOUNT_STATUS FOREIGN KEY (STATUS_ID) REFERENCES STATUS(STATUS_ID);

----------------INSERT STATUS MAIN FUNCTION
INSERT ALL
    INTO STATUS VALUES (1 , 'PENDING')
    INTO STATUS VALUES (2, 'OPEN')
    INTO STATUS VALUES (3, 'FROZEN')
    INTO STATUS VALUES (4,'CLOSED')
    SELECT * FROM DUAL;

-----------------INSERT EMPLOYEE USER DATA ONE ADMIN , ONE EMPLOYEE
INSERT INTO EMPLOYEE (USERNAME , PSSWRD , FIRSTNAME , LASTNAME , ADMIN_ID) VALUES ('richierich' , 'APPLEPIE' , 'Richard' , 'Mont' , 0);
INSERT INTO EMPLOYEE (USERNAME , PSSWRD , FIRSTNAME , LASTNAME , ADMIN_ID) VALUES ('rayray54' , 'APPLEPIE' , 'Raymond' , 'Anderson' , 1);

-----------------CREATE PROCEDURE

CREATE OR REPLACE PROCEDURE ADD_TRANSACTION
(
    ACCOUNTID_INPUT IN NUMBER,
    MESSAGE_INPUT IN VARCHAR2
)
AS
BEGIN
INSERT INTO TRANSACTION (ACCOUNT_ID , TYPE , TIME_HAPPEND) VALUES (ACCOUNTID_INPUT , MESSAGE_INPUT, SYSDATE);
COMMIT ;
END;
/
